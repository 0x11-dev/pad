#! /bin/bash

### BEGIN INIT INFO
# Provides:          etherpad-%BRANCH%
# Required-Start:    $local_fs $remote_fs
# Required-Stop:     $local_fs $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      S 0 1 6
# Short-Description: etherpad initscript
# Description:       EtherPad is the only web-based word processor that allows
#                    people to work together in really real-time.
#                    .
#                    When multiple people edit the same document simultaneously,
#                    any changes are instantly reflected on everyone's screen.
#                    The result is a new and productive way to collaborate on
#                    text documents, useful for meeting notes, drafting
#                    sessions, education, team programming, and more.
### END INIT INFO

# Author: penSec.IT UG (haftungsbeschränkt) <mail@pensec.it>

################################################################################
#
# Copyright (c) 2010 penSec.IT UG (haftungsbeschränkt)
#        http://www.pensec.it
#        mail@pensec.it
# 
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License. 
#
################################################################################

# Do NOT "set -e"



#####
#
# Patches the configuration file by replacing ,,%$1%'' with the contents of
# $2
#
# @param $1 Configuration File which contains the value to set to
# @param $2 Configuration key to apply (can be done only once)
# @param $3 Konfigurationsdatei
#
# @deprecated Wird nicht mehr verwendet
#
function apply_config() {
		CONFIG_FILE="${3}"
		TMP_FILE="/tmp/etherpad.properties"

		CONFIG_KEY="$2"
		CONFIG_VALUE=`cat $1`

		sed "s/%$CONFIG_KEY%/$CONFIG_VALUE/" $CONFIG_FILE > $TMP_FILE
		cp $TMP_FILE $CONFIG_FILE
		rm $TMP_FILE
}
#
#####





# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/usr/sbin:/usr/bin:/sbin:/bin
DESC="etherpad daemon"
NAME="etherpad"
DAEMON_BASE="/usr/share/etherpad/etherpad"
DAEMON=$DAEMON_BASE/bin/run.sh
DAEMON_ARGS=""
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
[ -f /etc/default/rcS ] && . /etc/default/rcS

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
	CONFIGURATION_BASE="/etc/etherpad"
	CONFIGURATION_SRC="${CONFIGURATION_BASE}/etherpad.properties"
	CONFIGURATION_DEST="${DAEMON_BASE}/etc/etherpad.localdev-default.properties"


	# Reset configuration
	cp "${CONFIGURATION_BASE}/etherpad.properties" "${CONFIGURATION_DEST}"


	# Apply configuration properties
	apply_config "${CONFIGURATION_BASE}/properties/is-production"		"IS_PRODUCTION"		"${CONFIGURATION_DEST}"
	apply_config "${CONFIGURATION_BASE}/properties/admin-password"		"ADMIN_PASSWORD"	"${CONFIGURATION_DEST}"
	apply_config "${CONFIGURATION_BASE}/properties/port"			"PORT"			"${CONFIGURATION_DEST}"
	apply_config "${CONFIGURATION_BASE}/properties/database-host"		"DATABASE_HOST"		"${CONFIGURATION_DEST}"
	apply_config "${CONFIGURATION_BASE}/properties/database-port"		"DATABASE_PORT"		"${CONFIGURATION_DEST}"
	apply_config "${CONFIGURATION_BASE}/properties/database-name"		"DATABASE_NAME"		"${CONFIGURATION_DEST}"
	apply_config "${CONFIGURATION_BASE}/properties/database-username"	"DATABASE_USERNAME"	"${CONFIGURATION_DEST}"
	apply_config "${CONFIGURATION_BASE}/properties/database-password"	"DATABASE_PASSWORD"	"${CONFIGURATION_DEST}"


	# Give the etherpad user the configuration file
	chown etherpad:etherpad "${CONFIGURATION_DEST}"



	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	start-stop-daemon --background --chdir $DAEMON_BASE --chuid etherpad:etherpad --start --quiet --make-pidfile --pidfile $PIDFILE --exec $DAEMON --test \
		|| return 1
	start-stop-daemon --background --chdir $DAEMON_BASE --chuid etherpad:etherpad --start --quiet --make-pidfile --pidfile $PIDFILE --exec $DAEMON -- \
		$DAEMON_ARGS \
		|| return 2
	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.  As a last resort, sleep for some time.
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
	start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
	[ "$?" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
	return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
	return 0
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  #reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	#log_daemon_msg "Reloading $DESC" "$NAME"
	#do_reload
	#log_end_msg $?
	#;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|restart|force-reload}" >&2
	exit 3
	;;
esac

:

